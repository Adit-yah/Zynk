import React, { useState } from "react";
import { useNavigate } from "react-router-dom";
import axiosClient from "../../utils/axios"
import { addPost } from "../../feature/postSlice";
import { useDispatch} from "react-redux";
import { FaArrowLeft } from "react-icons/fa";
import BackChevron from "../../svg/BackChevron";

export default function CreatePost() {
  const navigate = useNavigate();
  const dispatch = useDispatch()
  // States
  const [image, setImage] = useState(null);
  const [caption, setCaption] = useState("");
  const [useAI, setUseAI] = useState(false);
  const [mentionInput, setMentionInput] = useState("");
  const [imageFile, setImageFile] = useState('')
  const [isUploading, setIsUploading] = useState(false)
  // const [selectedMentions, setSelectedMentions] = useState([]);
  // const [mentionSuggestions, setMentionSuggestions] = useState([]);

  // Handlers
  const handleImageChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      setImage(URL.createObjectURL(file));
      setImageFile(file)
    }
  };

  const toggleAI = () => {
    if (useAI) {
      setCaption(""); // reset caption when toggling
    } else {
      setCaption("Caption is generated by AI"); // placeholder AI text
    }
    setUseAI(!useAI);
  };

  const handleMentionInput = (e) => {
    const value = e.target.value;
    setMentionInput(value);

    // Show suggestions when "@" typed
    // if (value.startsWith("@")) {
    //   const query = value.slice(1).toLowerCase();
    //   const suggestions = followingUsers.filter(
    //     (u) =>
    //       u.name.toLowerCase().includes(query) &&
    //       !selectedMentions.find((s) => s._id === u._id)
    //   );
    //   setMentionSuggestions(suggestions);
    // } else {
    //   setMentionSuggestions([]);
    // }
  };
  
  // const addMention = (user) => {
  //   setSelectedMentions([...selectedMentions, user]);
  //   setMentionInput("");
  //   setMentionSuggestions([]);
  // };

  // const removeMention = (id) => {
  //   setSelectedMentions(selectedMentions.filter((u) => u._id !== id));
  // };

const handlePost = async () => {
  if (!imageFile || !caption) return alert("Add image and caption!");

  const formData = new FormData();
  formData.append("image", imageFile); // ðŸ‘ˆ field name must match multer.single("image")
  formData.append("caption", caption);
  formData.append("mention", mentionInput);
  setIsUploading(true)
  
  try {
    
    const res = await axiosClient.post("/posts/post", formData);
    const temporaryMentionUserName = mentionInput.split(',')
    dispatch(addPost({...res.data.post , temporaryMentionUserName  }))
    setIsUploading(false)
    alert("Post created! ðŸŽ‰");
    navigate(-1);
  } catch (err) {
    console.error(err);
  }
};


  return (
    <main
      className="main-content relative  flex-1 flex flex-col bg-gray-100/80  overflow-y-auto  dark:bg-zinc-900 " // padding-bottom for mobile nav
    > 
      <div className="main-scroll  flex flex-col flex-1 shadow-md  w-screen  md:max-w-[450px] mx-auto transition-colors bg-white dark:bg-black ">
        {/* Header */}
        <header className="flex items-center sticky top-0 left-0  justify-between px-4 py-6 h-[62px] bg-white z-10 dark:bg-black">
          <div className="flex gap-2">
          <button onClick={() => navigate(-1)}>
            <BackChevron
              size={28}
              className="md:hidden  cursor-pointer text-primary dark:text-secondary"
            />
          </button>
          <h1 className="font-bold text-lg dark:text-white text-black md:text-primary md:dark:text-secondary ">
            Upload Post
          </h1>
          </div>
          <button
            onClick={handlePost}
            className={`text-white px-4 py-1 rounded-md ${
              (image && caption && !isUploading)
                ? "bg-primary dark:bg-secondary"
                : "bg-gray-400 cursor-not-allowed"
            } active:scale-95`}
            disabled={!image || !caption || isUploading}
          >
            { !isUploading ? 'Post' : 'Posting'}
          </button>
        </header>

        {/* Main Content */}
        <main className="flex-1  px-4 py-4  space-y-6">
          {/* Image Upload / Preview */}
          <div >
            <label className="font-semibold">Select Image</label>
            <div className=" min-h-[250px] h-full max-h-[500px] mx-auto  w-full max-w-[450px] overflow-hidden mt-4 border-2 border-dashed border-gray-300 dark:border-gray-700 flex items-center justify-center rounded-lg relative">
              <input
                type="file"
                className="absolute  h-full opacity-0 cursor-pointer"
                onChange={handleImageChange}
              />
              {!image ? (
                "Click to select image"
              ) : (
                <img
                  src={image}
                  className="object-cover w-full h-full rounded-lg"
                />
              )}
            </div>
          </div>
          
          {/* Caption */}
          <div>
            <div className="flex items-center justify-between mb-2">
              <label className="font-semibold">Caption</label>
              <button
                onClick={toggleAI}
                className="text-primary cursor-pointer dark:text-secondary text-sm font-medium"
              >
                {useAI ? "Manual" : "Use AI"}
              </button>
            </div>
            {!useAI && (
              <textarea
                value={caption}
                onChange={(e) => setCaption(e.target.value)}
                placeholder="Write a caption..."
                className="w-full p-2 overflow-scroll 
                [&::-webkit-scrollbar]:w-2 
                [&::-webkit-scrollbar-thumb]:rounded-xl 
                [&::-webkit-scrollbar-thumb]:bg-primary
                dark:[&::-webkit-scrollbar-thumb]:bg-secondary 
                [&::-webkit-scrollbar-thumb]:cursor-pointer 
                [&::-webkit-scrollbar-track]:bg-transparent 
                h-30 outline-0 rounded-md bg-gray-100/80 text-text-light/80
                dark:bg-zinc-900/80 resize-none dark:text-text-dark/80"
              />
            )}
            {useAI && <h1 className="text-xs text-primary  dark:text-secondary ">{caption}</h1>}
          </div>

          {/* Mentions */}
          <div>
            <label className="font-semibold">Mentions</label>

            <div className="mt-2">
              {/* Selected Mentions */}
              {/* <div className="flex gap-2  flex-wrap">
                {selectedMentions.map((user) => (
                  <div
                    key={user._id}
                    className="flex items-center gap-2 bg-primary/20 dark:bg-secondary/20 rounded-full px-2 py-1 text-sm"
                  >
                    {user.name}
                    <button onClick={() => removeMention(user._id)}>Ã—</button>
                  </div>
                ))}
              </div> */}
              <input
                type="text"
                value={mentionInput}
                onChange={handleMentionInput}
                placeholder="Username1, Username2 "
                className="w-full p-2 border-none mt-2 text-text-light bg-gray-100/80 dark:bg-zinc-900/80 outline-0 rounded-md dark:bg-backgroundDark dark:text-text-dark"
              />
            </div>

            {/* Suggestions Dropdown */}
            {/* {mentionSuggestions.length > 0 && (
              <ul className="border dark:border-gray-700 bg-gray-100/80 dark:bg-zinc-900  rounded-md mt-1 max-h-40 overflow-y-auto">
                {mentionSuggestions.map((u) => (
                  <li
                    key={u._id}
                    onClick={() => addMention(u)}
                    className="px-2 py-1 h-full max-h-[250px] cursor-pointer
                     hover:bg-primary/20 dark:hover:bg-pink-400/30"
                  >
                    {u.name}
                  </li>
                ))}
              </ul>
            )} */}
          </div>

        </main>
     
      </div>
    </main>
  );
}
