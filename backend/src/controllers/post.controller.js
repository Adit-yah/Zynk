import { set } from "mongoose";
import { createComment, getComments } from "../dao/comment.dao.js";
import { createLike, deleteLike, isLiked, userLikedPosts } from "../dao/like.dao.js";
import {
  createPost,
  getPosts,
  IncCommentOfPost,
  IncDecLikeFromPost,
} from "../dao/post.dao.js";
import { findMentionsUsers } from "../dao/user.dao.js";
import { generateCaption } from "../services/ai.service.js";
import { uploadImage } from "../services/storage.services.js";
import { stringify, v4 as uuidv4 } from "uuid"; // use yo generate unique name of post in database

export async function createPostController(req, res) {
  const { caption } = req.body;
  const mention = req.body.mention
    ? req.body.mention.split(",").map((m) => m.trim())
    : null;
  const file = req.file;
  const user = req.user;

  try {
    if (caption == "Caption is generated by AI") {
      const [image, generatedCaption, mentionUser] = await Promise.all([
        uploadImage(file, uuidv4()),
        generateCaption(file),
        mention ? findMentionsUsers(mention) : null,
      ]);

      let post = await createPost({
        user: user._id,
        image: image.url,
        caption: generatedCaption,
        mentions: mentionUser ? mentionUser.map((user) => user._id) : [],
      });

      post = await post.populate([
        { path: "user", select: "username image" },
        { path: "mentions", select: "username" },
      ]);

      return res.status(201).json({
        message: "post created successfully",
        post,
      });
    }

    const [image, mentionsUser] = await Promise.all([
      uploadImage(file, uuidv4()),
      mention ? findMentionsUsers(mention) : null,
    ]);

    const post = await createPost({
      user: user._id,
      image: image.url,
      caption,
      mentions: mentionsUser ? mentionsUser.map((user) => user._id) : [],
    });

    post = await post.populate([
      { path: "user", select: "username image" },
      { path: "mentions", select: "username" },
    ]);

    return res.status(201).json({
      message: "post created successfully",
      post,
    });
  } catch (err) {
    console.error("Error in createPostController:", err);
    res.status(400).json({
      message: "Failed to upload post",
      error: err.message,
    });
  }
}

export async function getPostsController(req, res) {
  const { skip, limit } = req.query;

  const posts = await getPosts(
    skip && (skip >= 0 ? skip : 0),
    limit && (limit <= 20 ? limit : 20)
  );

  const postIdArray = posts.map( post => post._id)
  
  const likedPosts = await userLikedPosts({postIdArray , userId : req.user._id})

  const  likedPostsSet = new Set(likedPosts.map( l => String(l.post)))
  const  updatedPosts  =  posts.map(post => {
        return  { ...post , "isLike" : likedPostsSet.has(String(post._id))}
    })
    

  res.status(200).json({
    message: "Posts fetched successfully",
    updatedPosts,
  });
}

export async function createCommentController(req, res) {
  const { post, text } = req.body;

  const [pst, comment] = await Promise.all([
    IncCommentOfPost(post),
    createComment({
      user: req.user._id,
      post,
      text,
    }),
  ]);

  res.status(201).json({
    message: "Comment created Successfully",
    comment,
    pst,
  });
}

export async function getCommentController(req, res) {
  const { postId, limit, skip } = req.query;

  const comments = await getComments({
    postId,
    limit,
    skip,
  });
  res.status(200).json({
    message: "Comments fetch successfully",
    comments,
  });
}

export async function createLikeController(req, res) {
  try {
    const { post } = req.body;
    const alreadyLiked = await isLiked({ post, user: req.user._id });

    if (alreadyLiked) {
      const [, updatedPost] = await Promise.all([
        deleteLike({ post, user: req.user._id }),
        IncDecLikeFromPost(post, 0),
      ]);
      return res
        .status(200)
        .json({ message: "liked removed successfully", updatedPost });
    } else {
      const [, updatedPost] = await Promise.all([
        createLike({ post, user: req.user._id }),
        IncDecLikeFromPost(post, 1),
      ]);
      res.status(201).json({
        message: "Post liked successfully",
        updatedPost,
      });
    }
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Something went wrong" });
  }
}
